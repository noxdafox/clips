(make-instance bad of OBJECT)
(make-instance bad of USER)
(make-instance bad of PRIMITIVE)
(make-instance bad of MULTIFIELD)
(make-instance bad of NUMBER)
(make-instance bad of EXTERNAL-ADDRESS)
(make-instance bad of INTEGER)
(make-instance bad of FLOAT)
(make-instance bad of LEXEME)
(make-instance bad of SYMBOL)
(make-instance bad of STRING)
(make-instance bad of ADDRESS)
(make-instance bad of INSTANCE)
(make-instance bad of INSTANCE-NAME)
(make-instance bad of INSTANCE-ADDRESS)
(make-instance bad of FACT-ADDRESS)
(defclass OBJECT (is-a USER))
(defclass USER (is-a USER))
(defclass PRIMITIVE (is-a USER))
(defclass MULTIFIELD (is-a USER))
(defclass NUMBER (is-a USER))
(defclass EXTERNAL-ADDRESS (is-a USER))
(defclass INTEGER (is-a USER))
(defclass FLOAT (is-a USER))
(defclass LEXEME (is-a USER))
(defclass SYMBOL (is-a USER))
(defclass STRING (is-a USER))
(defclass ADDRESS (is-a USER))
(defclass INSTANCE (is-a USER))
(defclass INSTANCE-NAME (is-a USER))
(defclass INSTANCE-ADDRESS (is-a USER))
(defclass FACT-ADDRESS (is-a USER))
(defclass BAD (is-a INSTANCE))
(defclass BAD (is-a INSTANCE-NAME))
(defclass BAD (is-a INSTANCE-ADDRESS))
(defmessage-handler INSTANCE bad ())
(defmessage-handler INSTANCE-NAME bad ())
(defmessage-handler INSTANCE-ADDRESS bad ())
(defclass)
(defclass JUNK)
(defclass JUNK bad-comment)
(defclass JUNK "comment")
(defclass JUNK "comment" ())
(defclass JUNK ())
(defclass JUNK "comment" (is-a))
(defclass JUNK (is-a))
(defclass JUNK (is-a BOGUS))
(defclass JUNK (is-a USER) (role abstract) (role concrete))
(defclass JUNK (is-a USER) (role concrete) (role abstract))
(defclass GOOD (is-a USER) (role abstract))
(make-instance bad of GOOD)
(defclass blah (is-a USER) (is-a USER))
(defclass JUNK (is-a USER)
   (role concrete)
   (slot))
(defclass JUNK (is-a USER)
   (slot 5))
(defclass JUNK (is-a USER)
  (slot bad)
  (slot bad))
(defclass JUNK (is-a USER)
  (slot bad (default) (default-dynamic (time))))
(defclass JUNK (is-a USER)
  (multislot bad)
  (single-slot bad))
(defclass JUNK (is-a USER)
  (slot bad (storage shared) (storage local)))
(defclass JUNK (is-a USER)
  (slot bad (access read-write) (access read-only)))
(defclass JUNK (is-a USER)
  (slot bad (access read-write) (access initialize-only)))
(defclass JUNK (is-a USER)
  (slot bad (access read-write) (access initialize-only)))
(defclass JUNK (is-a USER)
  (slot bad (propagation no-inherit) (propagation inherit)))
(defclass JUNK (is-a USER)
  (slot bad (source composite) (source exclusive)))
(defclass JUNK (is-a USER)
  (multislot bad)
  (slot bad))
(defclass JUNK (is-a USER)
  (slot bad (bogus)))
(defclass JUNK (is-a USER)
   (bogus))
(defclass JUNK (is-a USER)
   (slot bad (default (+ (eval "(gensym)") 2))))
(defclass JUNK (is-a USER)
   (slot bad (default-dynamic abc ())))
(defclass JUNK (is-a USER)
   (slot bad (default abc def)))
(defclass JUNK (is-a USER)
   (slot bad (default (mv-append))))
(defclass GOOD2 (is-a USER) (role concrete)
   (slot bad (default-dynamic abc def)))
(make-instance gd2 of GOOD2)
(defclass SUBGOOD (is-a GOOD) (role concrete))
(make-instance sg of SUBGOOD)
(defclass GOOD (is-a USER))
(list-defclasses)
(instances)
(defclass BOGUS (is-a USER)
  (slot x (default ?y)))
(defclass BOGUS (is-a USER)
  (slot x (default-dynamic ?y)))
(defclass BAD-GLOBAL (is-a USER) (role concrete)
   (slot x (default ?*bogus*)))
(defclass BAD-GLOBAL (is-a USER) (role concrete)
   (slot x (default-dynamic ?*bogus*)))
(make-instance bad-global of BAD-GLOBAL)
