TRUE
CLIPS> (batch "strngfnx.bat")
TRUE
CLIPS> (clear)                            ; 10.4.1
CLIPS> (str-cat)                          ; 10.4.1
[ARGACCES4] Function str-cat expected at least 1 argument(s)
CLIPS> (str-cat (create$))                ; 10.4.1
[ARGACCES5] Function str-cat expected argument #1 to be of type string, instance name, symbol, float, or integer
""
CLIPS> (str-cat a)                        ; 10.4.1
"a"
CLIPS> (str-cat "this one")               ; 10.4.1
"this one"
CLIPS> (str-cat 8.25)                     ; 10.4.1
"8.25"
CLIPS> (str-cat 19838)                    ; 10.4.1
"19838"
CLIPS> (str-cat [this-instance])          ; 10.4.1
"this-instance"
CLIPS> (str-cat a "b c" 8.9 " " 78 [x])   ; 10.4.1
"ab c8.9 78x"
CLIPS> (str-cat "" "" "" "")              ; 10.4.1
""
CLIPS> (str-cat "foo" bar)                ; 10.4.1
"foobar"
CLIPS> (sym-cat)                          ; 10.4.2
[ARGACCES4] Function sym-cat expected at least 1 argument(s)
CLIPS> (sym-cat (create$))                ; 10.4.2
[ARGACCES5] Function sym-cat expected argument #1 to be of type string, instance name, symbol, float, or integer
nil
CLIPS> (sym-cat a)                        ; 10.4.2
a
CLIPS> (sym-cat "this one")               ; 10.4.2
this one
CLIPS> (sym-cat 8.5)                      ; 10.4.2
8.5
CLIPS> (sym-cat 19838)                    ; 10.4.2
19838
CLIPS> (sym-cat [this-instance])          ; 10.4.2
this-instance
CLIPS> (sym-cat a "b c" 8.9 " " 78 [x])   ; 10.4.2
ab c8.9 78x
CLIPS> (sym-cat "" "" "" "")              ; 10.4.2

CLIPS> (sub-string)                       ; 10.4.3
[ARGACCES4] Function sub-string expected exactly 3 argument(s)
CLIPS> (sub-string 1)                     ; 10.4.3
[ARGACCES4] Function sub-string expected exactly 3 argument(s)
CLIPS> (sub-string 1 3)                   ; 10.4.3
[ARGACCES4] Function sub-string expected exactly 3 argument(s)
CLIPS> (sub-string 1 2 "acd" 3)           ; 10.4.3
[ARGACCES4] Function sub-string expected exactly 3 argument(s)
CLIPS> (sub-string a 2 "abc")             ; 10.4.3
[ARGACCES5] Function sub-string expected argument #1 to be of type integer
CLIPS> (sub-string 2 a "de")              ; 10.4.3
[ARGACCES5] Function sub-string expected argument #2 to be of type integer
CLIPS> (sub-string 1 2 (create$ a b))     ; 10.4.3
[ARGACCES5] Function sub-string expected argument #3 to be of type symbol, string, or instance name
CLIPS> (sub-string 1.0 2 "abc")           ; 10.4.3
[ARGACCES5] Function sub-string expected argument #1 to be of type integer
CLIPS> (sub-string 1 2.0 "abc")           ; 10.4.3
[ARGACCES5] Function sub-string expected argument #2 to be of type integer
CLIPS> (sub-string 1 2.5 "abc")           ; 10.4.3
[ARGACCES5] Function sub-string expected argument #2 to be of type integer
CLIPS> (sub-string 2 2 abc)               ; 10.4.3
"b"
CLIPS> (sub-string 1 3 "abc")             ; 10.4.3
"abc"
CLIPS> (sub-string -1 3 "abc")            ; 10.4.3
"abc"
CLIPS> (sub-string 1 4 "xyz")             ; 10.4.3
"xyz"
CLIPS> (sub-string 3 1 "abc")             ; 10.4.3
""
CLIPS> (sub-string 1 1 "xyz")             ; 10.4.3
"x"
CLIPS> (sub-string 2 2 "xyz")             ; 10.4.3
"y"
CLIPS> (sub-string 3 3 "xyz")             ; 10.4.3
"z"
CLIPS> (sub-string 0 0 "abc")             ; 10.4.3
""
CLIPS> (sub-string 4 4 "abc")             ; 10.4.3
""
CLIPS> (sub-string 2 3 "xyzq")            ; 10.4.3
"yz"
CLIPS> (sub-string 5 7 "abc")             ; 10.4.3
""
CLIPS> (sub-string -1 0 "abc")            ; 10.4.3
""
CLIPS> (sub-string 3 8 "abcdefghijkl")    ; 10.4.3
"cdefgh"
CLIPS> (sub-string 1 1 "")                ; 10.4.3
""
CLIPS> (str-index)                        ; 10.4.4
[ARGACCES4] Function str-index expected exactly 2 argument(s)
CLIPS> (str-index "a")                    ; 10.4.4
[ARGACCES4] Function str-index expected exactly 2 argument(s)
CLIPS> (str-index "a" "b" 3)              ; 10.4.4
[ARGACCES4] Function str-index expected exactly 2 argument(s)
CLIPS> (str-index 1 "a")                  ; 10.4.4
[ARGACCES5] Function str-index expected argument #1 to be of type symbol, string, or instance name
CLIPS> (str-index "a" 7.3)                ; 10.4.4
[ARGACCES5] Function str-index expected argument #2 to be of type symbol, string, or instance name
CLIPS> (str-index "a" a)                  ; 10.4.4
1
CLIPS> (str-index a "a")                  ; 10.4.4
1
CLIPS> (str-index "" "")                  ; 10.4.4
1
CLIPS> (str-index "" "xy")                ; 10.4.4
3
CLIPS> (str-index "xy" "")                ; 10.4.4
FALSE
CLIPS> (str-index "ab" "abcd")            ; 10.4.4
1
CLIPS> (str-index "ab" "cabd")            ; 10.4.4
2
CLIPS> (str-index "ab" "cdab")            ; 10.4.4
3
CLIPS> (str-index "b" "xyzq")             ; 10.4.4
FALSE
CLIPS> (str-index "ab" "axbayaazbbq")     ; 10.4.4
FALSE
CLIPS> (str-index [ab] [dabc])            ; 10.4.4
2
CLIPS> (str-index "def" "abcdefghi")      ; 10.4.4
4
CLIPS> (str-index "qwerty" "qwertypoiuyt")
1
CLIPS> (str-index "qwerty" "poiuytqwer")  ; 10.4.4
FALSE
CLIPS> (eval)                             ; 10.4.5
[ARGACCES4] Function eval expected exactly 1 argument(s)
CLIPS> (eval "cat" "dog")                 ; 10.4.5
[ARGACCES4] Function eval expected exactly 1 argument(s)
CLIPS> (eval 7.8)                         ; 10.4.5
[ARGACCES5] Function eval expected argument #1 to be of type symbol or string
CLIPS> (eval 900)                         ; 10.4.5
[ARGACCES5] Function eval expected argument #1 to be of type symbol or string
CLIPS> (eval [abc])                       ; 10.4.5
[ARGACCES5] Function eval expected argument #1 to be of type symbol or string
CLIPS> (eval (create$ a x y))             ; 10.4.5
[ARGACCES5] Function eval expected argument #1 to be of type symbol or string
CLIPS> (eval cat)                         ; 10.4.5
cat
CLIPS> (eval "dog")                       ; 10.4.5
dog
CLIPS> (eval "7")                         ; 10.4.5
7
CLIPS> (eval "893.34")                    ; 10.4.5
893.34
CLIPS> (eval "[ab]")                      ; 10.4.5
[ab]
CLIPS> (eval "(+ 3 (* 4 5))")             ; 10.4.5
23
CLIPS> (eval "(facts)")                   ; 10.4.5
f-0     (initial-fact)
For a total of 1 fact.
CLIPS> (eval "?x")                        ; 10.4.5
[STRNGFUN2] Some variables could not be accessed by the eval function.
FALSE
CLIPS> (eval "(defrule foo =>)")          ; 10.4.5

[EXPRNPSR3] Missing function declaration for defrule.
FALSE
CLIPS> (eval "(+ 3 4)")                   ; 10.4.5
7
CLIPS> (eval "(mv-append a b c)")         ; 10.4.5
(a b c)
CLIPS> (build)                            ; 10.4.6
[ARGACCES4] Function build expected exactly 1 argument(s)
CLIPS> (build "(defrule foo =>)" "dog")   ; 10.4.6
[ARGACCES4] Function build expected exactly 1 argument(s)
CLIPS> (build 7.8)                        ; 10.4.6
[ARGACCES5] Function build expected argument #1 to be of type symbol or string
CLIPS> (build 900)                        ; 10.4.6
[ARGACCES5] Function build expected argument #1 to be of type symbol or string
CLIPS> (build [abc])                      ; 10.4.6
[ARGACCES5] Function build expected argument #1 to be of type symbol or string
CLIPS> (build (create$ a x y))            ; 10.4.6
[ARGACCES5] Function build expected argument #1 to be of type symbol or string
CLIPS> (build deftemplate)                ; 10.4.6
FALSE
CLIPS> (build "(defrule foo =>)")         ; 10.4.6
TRUE
CLIPS> (build "(defrule blah)")           ; 10.4.6

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for defrule.

ERROR:
(defrule MAIN::blah)
FALSE
CLIPS> (build "(+ 3 4)")                  ; 10.4.6
FALSE
CLIPS> (build "defrule foo =>)")          ; 10.4.6
FALSE
CLIPS> (rules)                            ; 10.4.6
foo
For a total of 1 defrule.
CLIPS> (clear)                            ; 10.4.6
CLIPS> (upcase)                           ; 10.4.7
[ARGACCES4] Function upcase expected exactly 1 argument(s)
CLIPS> (upcase "abc" "def")               ; 10.4.7
[ARGACCES4] Function upcase expected exactly 1 argument(s)
CLIPS> (upcase abc)                       ; 10.4.7
ABC
CLIPS> (upcase "xyz")                     ; 10.4.7
"XYZ"
CLIPS> (upcase 8993.34)                   ; 10.4.7
[ARGACCES5] Function upcase expected argument #1 to be of type symbol, string, or instance name
CLIPS> (upcase 8993)                      ; 10.4.7
[ARGACCES5] Function upcase expected argument #1 to be of type symbol, string, or instance name
CLIPS> (upcase [another-thingo])          ; 10.4.7
[ANOTHER-THINGO]
CLIPS> (upcase (create$ jkkj 78 3.45))    ; 10.4.7
[ARGACCES5] Function upcase expected argument #1 to be of type symbol, string, or instance name
CLIPS> (upcase "this is a sentence")      ; 10.4.7
"THIS IS A SENTENCE"
CLIPS> (upcase "THIS IS A SENTENCE")      ; 10.4.7
"THIS IS A SENTENCE"
CLIPS> (upcase "aA1234567890zZ")          ; 10.4.7
"AA1234567890ZZ"
CLIPS> (upcase "aA!@#$%^&*()zZ")          ; 10.4.7
"AA!@#$%^&*()ZZ"
CLIPS> (upcase "`~-_=+[{]}|;:',<.>?")     ; 10.4.7
"`~-_=+[{]}|;:',<.>?"
CLIPS> (upcase "This is a test of upcase")
"THIS IS A TEST OF UPCASE"
CLIPS> (upcase A_Word_Test_for_Upcase)    ; 10.4.7
A_WORD_TEST_FOR_UPCASE
CLIPS> (lowcase)                          ; 10.4.8
[ARGACCES4] Function lowcase expected exactly 1 argument(s)
CLIPS> (lowcase "ABC" "DEF")              ; 10.4.8
[ARGACCES4] Function lowcase expected exactly 1 argument(s)
CLIPS> (lowcase ABC)                      ; 10.4.8
abc
CLIPS> (lowcase "XYZ")                    ; 10.4.8
"xyz"
CLIPS> (lowcase 8993.34)                  ; 10.4.8
[ARGACCES5] Function lowcase expected argument #1 to be of type symbol, string, or instance name
CLIPS> (lowcase 8993)                     ; 10.4.8
[ARGACCES5] Function lowcase expected argument #1 to be of type symbol, string, or instance name
CLIPS> (lowcase [another-thingo])         ; 10.4.8
[another-thingo]
CLIPS> (lowcase (create$ jkkj 78 3.45))   ; 10.4.8
[ARGACCES5] Function lowcase expected argument #1 to be of type symbol, string, or instance name
CLIPS> (lowcase "this is a sentence")     ; 10.4.8
"this is a sentence"
CLIPS> (lowcase "THIS IS A SENTENCE")     ; 10.4.8
"this is a sentence"
CLIPS> (lowcase "aA1234567890zZ")         ; 10.4.8
"aa1234567890zz"
CLIPS> (lowcase "aA!@#$%^&*()zZ")         ; 10.4.8
"aa!@#$%^&*()zz"
CLIPS> (lowcase "`~-_=+[{]}|;:',<.>?")    ; 10.4.8
"`~-_=+[{]}|;:',<.>?"
CLIPS> (lowcase "this is a test of lowcase")
"this is a test of lowcase"
CLIPS> (lowcase A_Word_Test_for_Lowcase)  ; 10.4.8
a_word_test_for_lowcase
CLIPS> (str-compare)                      ; 10.4.9
[ARGACCES4] Function str-compare expected at least 2 argument(s)
CLIPS> (str-compare "xyz")                ; 10.4.9
[ARGACCES4] Function str-compare expected at least 2 argument(s)
CLIPS> (str-compare "zykk" "kkdfj" "df")  ; 10.4.9
[ARGACCES5] Function str-compare expected argument #3 to be of type integer
CLIPS> (str-compare 783.9 "dlfj")         ; 10.4.9
[ARGACCES5] Function str-compare expected argument #1 to be of type symbol, string, or instance name
CLIPS> (str-compare [xyz] "ldf")          ; 10.4.9
1
CLIPS> (str-compare kkdm 9883)            ; 10.4.9
[ARGACCES5] Function str-compare expected argument #2 to be of type symbol, string, or instance name
CLIPS> (str-compare klkll (create$ a))    ; 10.4.9
[ARGACCES5] Function str-compare expected argument #2 to be of type symbol, string, or instance name
CLIPS> (str-compare abc ABC)              ; 10.4.9
1
CLIPS> (str-compare ABC abc)              ; 10.4.9
-1
CLIPS> (str-compare "abcd" "abce")        ; 10.4.9
-1
CLIPS> (str-compare "ABCD" ABCE)          ; 10.4.9
-1
CLIPS> (str-compare abc xyz)              ; 10.4.9
-1
CLIPS> (str-compare xyz abc)              ; 10.4.9
1
CLIPS> (str-compare [a23] [a24])          ; 10.4.9
-1
CLIPS> (str-compare same "same")          ; 10.4.9
0
CLIPS> (str-compare "string1" "string2")  ; 10.4.9
-1
CLIPS> (str-length)                       ; 10.4.10
[ARGACCES4] Function str-length expected exactly 1 argument(s)
CLIPS> (str-length "zykk" "kkdfj")        ; 10.4.10
[ARGACCES4] Function str-length expected exactly 1 argument(s)
CLIPS> (str-length 783.9)                 ; 10.4.10
[ARGACCES5] Function str-length expected argument #1 to be of type symbol, string, or instance name
CLIPS> (str-length [xyz])                 ; 10.4.10
3
CLIPS> (str-length 9883)                  ; 10.4.10
[ARGACCES5] Function str-length expected argument #1 to be of type symbol, string, or instance name
CLIPS> (str-length (create$ a))           ; 10.4.10
[ARGACCES5] Function str-length expected argument #1 to be of type symbol, string, or instance name
CLIPS> (str-length "")                    ; 10.4.10
0
CLIPS> (str-length "x y z")               ; 10.4.10
5
CLIPS> (str-length a)                     ; 10.4.10
1
CLIPS> (str-length "abcd")                ; 10.4.10
4
CLIPS> (str-length xyz)                   ; 10.4.10
3
CLIPS> (dribble-off)
