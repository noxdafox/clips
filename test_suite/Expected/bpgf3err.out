TRUE
CLIPS> (batch "bpgf3err.bat")
TRUE
CLIPS> (defgeneric ())

[CSTRCPSR2] Missing name for defgeneric construct

ERROR:
(defgeneric (
CLIPS> (if (> 3 4))

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for if function.
CLIPS> (deffacts info (fact ?x))

[PRNTUTIL6] Local variables can not be accessed by a deffacts construct.

ERROR:
(deffacts MAIN::info
   (fact ?x))
CLIPS> (defmethod foo () (+ ?a 2))

[PRCCODE3] Undefined variable a referenced in method.

ERROR:
(defmethod MAIN::foo
   ()
   (+ ?a 2)
   )
CLIPS> (deffunction foo ($?wild ?a))
[PRCCODE8] No parameters allowed after wildcard parameter.

ERROR:
(deffunction MAIN::foo
   ($?wild ?a
CLIPS> (deffunction foo (?a ?a))
[PRCCODE7] Duplicate parameter names not allowed.

ERROR:
(deffunction MAIN::foo
   (?a ?a
CLIPS> (assert (fact 1 (fact 2)))

[EXPRNPSR3] Missing function declaration for fact.
CLIPS> (assert ())

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for first field of a RHS pattern.
CLIPS> (assert)

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for assert command.
CLIPS> (+ (~ 3 4) 4)

[EXPRNPSR1] A function name must be a symbol
CLIPS> (xyz)

[EXPRNPSR3] Missing function declaration for xyz.
CLIPS> (<= ~ 4)

[EXPRNPSR2] Expected a constant, variable, or expression.
CLIPS> (defrule error (declare (priority 10)) =>)

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for declare statement.

ERROR:
(defrule MAIN::error
   (declare (priority
CLIPS> (defrule error (declare (salience a)) =>)

[PRNTUTIL10] Salience value must be an integer value.

ERROR:
(defrule MAIN::error
   (declare (salience a
CLIPS> (defrule error (declare (salience 20000)) =>)

[PRNTUTIL9] Salience value out of range -10000 to 10000.

ERROR:
(defrule MAIN::error
   (declare (salience 20000
CLIPS> (defrule error (or) =>)

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for the or conditional element.

ERROR:
(defrule MAIN::error
   (or)
CLIPS> (defrule error (not ?f <- (fact)) =>)

[RULELHS2] A pattern CE cannot be bound to a pattern-address within a not CE

ERROR:
(defrule MAIN::error
   (not ?f
CLIPS> (defrule error () =>)

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for the first field of a pattern.

ERROR:
(defrule MAIN::error
   ()
CLIPS> (defrule error (test (> 3 4)) =>)
CLIPS> (defrule error (a) (logical (b)) =>)

[RULEPSR1] Logical CEs must be placed first in a rule

ERROR:
(defrule MAIN::error
   (a)
   (logical
        (b))
   =>)
CLIPS> (defrule error (logical (a)) (b) (logical (c)) =>)

[RULEPSR2] Gaps may not exist between logical CEs

ERROR:
(defrule MAIN::error
   (logical
        (a))
   (b)
   (logical
        (c))
   =>)
CLIPS> (defrule error => (assert (a ?f)))

[PRCCODE3] Undefined variable f referenced in RHS of defrule.

ERROR:
(defrule MAIN::error
   =>
   (assert (a ?f)))
CLIPS> (defrule error => (retract ?f))

[PRCCODE3] Undefined variable f referenced in RHS of defrule.

ERROR:
(defrule MAIN::error
   =>
   (retract ?f))
CLIPS> (defrule error (fact) (test (> ?f 4)) =>)

[ANALYSIS4] Variable ?f found in the expression (> ?f 4)
was referenced in CE #2 before being defined.

ERROR:
(defrule MAIN::error
   (fact)
   (test (> ?f 4))
   =>)
CLIPS> (defrule error ?f <- (a ?f) =>)
CLIPS> (defrule error ?f <- (a) ?f <- (b) =>)

[ANALYSIS1] Duplicate pattern-address ?f found in CE #2.

ERROR:
(defrule MAIN::error
   ?f <- (a)
   ?f <- (b)
   =>)
CLIPS> (defrule error (a ~?f) =>)

[ANALYSIS4] Variable ?f was referenced in CE #1 field #1 before being defined.

ERROR:
(defrule MAIN::error
   (a ~?f)
   =>)
CLIPS> (deftemplate error (multifield x) (multifield y))
CLIPS> (deftemplate error (field x (allowed-types word)))

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for slot attributes.

ERROR:
(deftemplate MAIN::error
   (field x (allowed-types
CLIPS> (deftemplate example (field x (default a) (default b)))

[PRNTUTIL5] The default attribute has already been parsed.

ERROR:
(deftemplate MAIN::example
   (field x (default a) (default
CLIPS> (deftemplate error (multifield x (default 3 ?NONE)))

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for default attribute.

ERROR:
(deftemplate MAIN::error
   (multifield x (default 3 ?NONE
CLIPS> (deftemplate error (multifield x (default ?NONE 3)))

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for default attribute.

ERROR:
(deftemplate MAIN::error
   (multifield x (default ?NONE 3
CLIPS> (deftemplate error (field x (default ~)))

[EXPRNPSR2] Expected a constant, variable, or expression.

ERROR:
(deftemplate MAIN::error
   (field x (default ~
CLIPS> (deftemplate error (field x (default)))

[DEFAULT1] The default value for a single field slot must be a single field value

ERROR:
(deftemplate MAIN::error
   (field x (default)
CLIPS> (deftemplate example (field x))
CLIPS> (assert (example (x)))

[TMPLTDEF2] The single field slot x can only contain a single field value.
CLIPS> (assert (example (x a b)))

[TMPLTDEF2] The single field slot x can only contain a single field value.
CLIPS> (defrule error ?f <- (example) => (modify ?f (x)))

[TMPLTDEF2] The single field slot x can only contain a single field value.

ERROR:
(defrule MAIN::error
   ?f <- (example)
   =>
   (modify ?f (x)))
CLIPS> (defrule error ?f <- (example) => (modify ?f (x 3 4)))

[TMPLTDEF2] The single field slot x can only contain a single field value.

ERROR:
(defrule MAIN::error
   ?f <- (example)
   =>
   (modify ?f (x 3 4)))
CLIPS> (deftemplate example (field x))
CLIPS> (assert (example (x =(mv-append a b c))))

[TMPLTDEF2] The single field slot x can only contain a single field value.
CLIPS> (deftemplate example (field x))
CLIPS> (assert (example (x a) (x b)))

[PRNTUTIL5] The slot x has already been parsed.
CLIPS> (deftemplate example (field x))
CLIPS> (defrule error (example|other (x 3)) =>)

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for deftemplate patterns.

ERROR:
(defrule MAIN::error
   (example|
CLIPS> (deftemplate example (field x))
CLIPS> (defrule error (example (z 3)) =>)

[TMPLTDEF1] Invalid slot z not defined in corresponding deftemplate example.

ERROR:
(defrule MAIN::error
   (example (z
CLIPS> (undeftemplate example)
CLIPS> (defrule error ?f <- (example) => (modify ?f (x 3)))
CLIPS> (defrule error => (modify 1 (x 3)))

[TMPLTFUN1] Fact-indexes can only be used by modify as a top level command.

ERROR:
(defrule MAIN::error
   =>
   (modify 1
CLIPS> (deftemplate example (field x (type INTEGER)))
CLIPS> (defrule testit (example (x a)) =>)

[CSTRNCHK1] A literal restriction value found in CE #1
does not match the allowed types for slot x.

ERROR:
(defrule MAIN::testit
   (example (x a))
   =>)
CLIPS> (deftemplate example (field x (type INTEGER)))
CLIPS> (assert (example (x =(float 3))))

[CSTRNCHK1] The function return value found in the assert command
does not match the allowed types for slot x.
CLIPS> (deftemplate example (field x (allowed-integers 1 2 3)))
CLIPS> (defrule testit (example (x 4)) =>)

[CSTRNCHK1] A literal restriction value found in CE #1
does not match the allowed values for slot x.

ERROR:
(defrule MAIN::testit
   (example (x 4))
   =>)
CLIPS> (deftemplate example (field x (range 1 3)))
CLIPS> (assert (example (x 4)))

[CSTRNCHK1] A literal slot value found in the assert command
does not fall in the allowed range 1 to 3 for slot x.
CLIPS> (deftemplate example1 (field x (type SYMBOL) 
                                      (allowed-integers 1 2 3)))

[CSTRNPSR1] The type attribute conflicts with the allowed-integers/numbers attribute.

ERROR:
(deftemplate MAIN::example1
   (field x (type SYMBOL) (allowed-integers 1 2 3))
CLIPS> (deftemplate example2 (field x (range 1 3)
                                      (default 5)))

[CSTRNCHK1] An expression found in the default attribute
does not fall in the allowed range 1 to 3 for slot x.

ERROR:
(deftemplate MAIN::example2
   (field x (range 1 3) (default 5))
CLIPS> (deftemplate example3 (field x (type SYMBOL)
                                      (range 1 5)))

[CSTRNPSR1] The type attribute conflicts with the range attribute.

ERROR:
(deftemplate MAIN::example3
   (field x (type SYMBOL) (range 1 5))
CLIPS> (deftemplate example (field x))
CLIPS> (defglobal ?*x* = (mv-append a b c))
CLIPS> (assert (example (x ?*x*)))

[TMPLTFUN2] Attempted to assert a multifield value 
into the single field slot x of deftemplate example.
FALSE
CLIPS> (deftemplate example (field x (allowed-values a b 2 3) 
                                     (allowed-integers 4 5 6)))

[CSTRNPSR3] The allowed-integers attribute cannot be used
in conjunction with the allowed-values attribute.

ERROR:
(deftemplate MAIN::example
   (field x (allowed-values a b 2 3) (allowed-integers
CLIPS> (deftemplate example (field x (allowed-integers 1 2 3) 
                                     (range 4 6)))

[CSTRNPSR3] The range attribute cannot be used
in conjunction with the allowed-integers attribute.

ERROR:
(deftemplate MAIN::example
   (field x (allowed-integers 1 2 3) (range
CLIPS> (deftemplate example (field x (type ?VARIABLE INTEGER)))

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for type attribute.

ERROR:
(deftemplate MAIN::example
   (field x (type ?VARIABLE INTEGER 
CLIPS> (deftemplate example (field x (type INTEGERFLOAT)))

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for type attribute.

ERROR:
(deftemplate MAIN::example
   (field x (type INTEGERFLOAT 
CLIPS> (deftemplate example (field x (allowed-integers 3.0)))

[CSTRNPSR4] Value does not match the expected type for the allowed-integers attribute

ERROR:
(deftemplate MAIN::example
   (field x (allowed-integers 3.0 
CLIPS> (deftemplate example 
          (field x (min-number-of-elements 3)))

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for slot attributes.

ERROR:
(deftemplate MAIN::example
   (field x (min-number-of-elements
CLIPS> (defglobal ?x = 3)

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for defglobal.

ERROR:
(defglobal MAIN ?x
CLIPS> (deffunction defgeneric ())
[DFFNXPSR1] Deffunctions are not allowed to replace constructs.

ERROR:
(deffunction MAIN::defgeneric
   (
CLIPS> (deffunction + ())
[DFFNXPSR2] Deffunctions are not allowed to replace external functions.

ERROR:
(deffunction MAIN::+
   (
CLIPS> (defgeneric foo)
CLIPS> (deffunction foo ())
[DFFNXPSR3] Deffunctions are not allowed to replace generic functions.

ERROR:
(deffunction MAIN::foo
   (
CLIPS> (clear)
CLIPS> (deffunction foo)

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for parameter list.

ERROR:
(deffunction MAIN::foo)
CLIPS> (deffunction foo (?a abc))

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for parameter list.

ERROR:
(deffunction MAIN::foo
   (?a abc
CLIPS> (deffunction foo () (build "(deffunction foo ())"))
CLIPS> (foo)
[DFNXPSR4] Deffunction foo may not be redefined while it is executing.

ERROR:
(deffunction MAIN::foo
   (
FALSE
CLIPS> (defgeneric deffunction)
[GENRCPSR3] Defgenerics are not allowed to replace constructs.

ERROR:
(defgeneric MAIN::deffunction)
CLIPS> (clear)
CLIPS> (deffunction foo ())
CLIPS> (defgeneric foo)
[GENRCPSR5] Defgenerics are not allowed to replace deffunctions.

ERROR:
(defgeneric MAIN::foo)
CLIPS> (clear)
CLIPS> (defgeneric foo ())
[GENRCPSR1] Expected ')' to complete defgeneric.

ERROR:
(defgeneric MAIN::foo
   (
CLIPS> (defgeneric)

[CSTRCPSR2] Missing name for defgeneric construct

ERROR:
(defgeneric )
CLIPS> (clear)
CLIPS> (defmethod foo 1 ((?a INTEGER)))
CLIPS> (defmethod foo 2 ((?a INTEGER)))
[GENRCPSR2] New method #2 would be indistinguishable from method #1.

ERROR:
(defmethod MAIN::foo 2
   ((?a INTEGER))
   
CLIPS> (clear)
CLIPS> (defmethod foo 0 ())
[GENRCPSR6] Method index out of range.

ERROR:
(defmethod MAIN::foo 0
CLIPS> (clear)
CLIPS> (defmethod foo)
[GENRCPSR7] Expected a '(' to begin method parameter restrictions.

ERROR:
(defmethod MAIN::foo)
CLIPS> (clear)
CLIPS> (defmethod foo (abc))
[GENRCPSR9] Expected a variable or '(' for parameter specification.

ERROR:
(defmethod MAIN::foo
   (abc
CLIPS> (clear)
CLIPS> (defmethod foo ((abc)))
[GENRCPSR8] Expected a variable for parameter specification.

ERROR:
(defmethod MAIN::foo
   ((abc
CLIPS> (clear)
CLIPS> (defmethod foo ((?a (< ?a 1) INTEGER)))
[GENRCPSR10] Query must be last in parameter restriction.

ERROR:
(defmethod MAIN::foo
   ((?a (< ?a 1) INTEGER
CLIPS> (clear)
CLIPS> (defmethod foo ((?a INTEGER INTEGER)))
[GENRCPSR11] Duplicate classes not allowed in parameter restriction.

ERROR:
(defmethod MAIN::foo
   ((?a INTEGER INTEGER
CLIPS> (clear)
CLIPS> (defmethod foo ((?a INTEGER NUMBER)))
[GENRCPSR15] INTEGER class is redundant.

ERROR:
(defmethod MAIN::foo
   ((?a INTEGER NUMBER
CLIPS> (clear)
CLIPS> (defmethod foo ((?a (bind ?b 1))))
[GENRCPSR12] Binds are not allowed in query expressions.

ERROR:
(defmethod MAIN::foo
   ((?a (bind ?b 1)
CLIPS> (clear)
CLIPS> (defmethod foo ((?a 34)))
[GENRCPSR13] Expected a valid class name or query.

ERROR:
(defmethod MAIN::foo
   ((?a 34
CLIPS> (clear)
CLIPS> (defmethod foo ((?a bogus-class)))
[GENRCPSR14] Unknown class in method.

ERROR:
(defmethod MAIN::foo
   ((?a bogus-class
CLIPS> (clear)
CLIPS> (defclass A (is-a USER))
CLIPS> (defmethod foo ((?a A LEXEME)))
CLIPS> (defclass A (is-a OBJECT)))
[CLASSPSR3] A class cannot be redefined while
    outstanding references to it still exist.

ERROR:
(defclass MAIN::A
   (
CLIPS> (clear)
CLIPS> (defclass STRING (is-a NUMBER))
[CLASSPSR2] Cannot redefine a predefined system class.

ERROR:
(defclass MAIN::STRING
   (
CLIPS> (clear)
CLIPS> (defclass A (is-a A))
[INHERPSR1] A class may not have itself as a superclass.

ERROR:
(defclass MAIN::A
   (is-a A
CLIPS> (clear)
CLIPS> (defclass A (is-a USER USER))
[INHERPSR2] A class may inherit from a superclass only once.

ERROR:
(defclass MAIN::A
   (is-a USER USER
CLIPS> (clear)
CLIPS> (defclass B (is-a A))
[INHERPSR3] A class must be defined after all its superclasses.

ERROR:
(defclass MAIN::B
   (is-a A
CLIPS> (clear)
CLIPS> (defclass A (is-a USER))
CLIPS> (defclass B (is-a A))
CLIPS> (defclass C (is-a B))
CLIPS> (defclass A (is-a C))
[INHERPSR5] Partial precedence list formed: A
Precedence loop in superclasses: A B C A

ERROR:
(defclass MAIN::A
   (is-a C)
CLIPS> (clear)
CLIPS> (defclass A (is-a))
[INHERPSR4] Must have at least one superclass.

ERROR:
(defclass MAIN::A
   (is-a )
CLIPS> (defclass A (is-a USER)
  (role abstract)
  (role concrete))
[CLASSPSR4] Class role already declared.

ERROR:
(defclass MAIN::A
   (is-a USER)
   (role abstract)
   (role
CLIPS> (defclass A (is-a USER)
  (slot foo (default 1)
            (default 2)))
[CLSLTPSR2] default facet already specified.

ERROR:
(defclass MAIN::A
   (is-a USER)
   (slot foo
      (default 1)
      (default
CLIPS> (defclass A (is-a USER)
  (slot foo (access read-only)
            (access initialize-only)))
[CLSLTPSR2] access facet already specified.

ERROR:
(defclass MAIN::A
   (is-a USER)
   (slot foo
      (access read-only)
      (access
CLIPS> (defclass A (is-a USER)
  (slot foo (default 1 2 3 4)))
[INSFUN7] (1 2 3 4) illegal for single-field slot foo found in slot default value.

ERROR:
(defclass MAIN::A
   (is-a USER)
   (slot foo
      (default 1 2 3 4))
CLIPS> (defclass A (is-a USER)
  (slot foo)
  (slot foo))
[CLSLTPSR1] Duplicate slots not allowed.

ERROR:
(defclass MAIN::A
   (is-a USER)
   (slot foo)
   (slot foo
CLIPS> (defclass A (is-a OBJECT USER))
[INHERPSR5] Partial precedence list formed:
Precedence loop in superclasses: OBJECT USER OBJECT

ERROR:
(defclass MAIN::A
   (is-a OBJECT USER)
CLIPS> (defmessage-handler bogus-class foo ())
[MSGPSR1] A class must be defined before its message-handlers.

ERROR:
(defmessage-handler MAIN::bogus-class
   foo
CLIPS> (defclass A (is-a USER) (role concrete))
CLIPS> (make-instance a of A)
[a]
CLIPS> (defmessage-handler A build-new ()
  (build "(defmessage-handler A new ())"))
CLIPS> (send [a] build-new)
[MSGPSR2] Cannot (re)define message-handlers during execution of 
  other message-handlers for the same class.

ERROR:
(defmessage-handler MAIN::A
   new
FALSE
CLIPS> (defmessage-handler USER init ())
[MSGPSR3] System message-handlers may not be modified.

ERROR:
(defmessage-handler MAIN::USER init
   (
CLIPS> (clear)
CLIPS> (defclass A (is-a USER)
  (slot foo (create-accessor read-write)))
CLIPS> (defmessage-handler A get-foo ())
[MSGPSR3] System message-handlers may not be modified.

ERROR:
(defmessage-handler MAIN::A get-foo
   (
CLIPS> (defmessage-handler USER foo (?self:bar))
[MSGPSR4] Illegal slot reference in parameter list.

ERROR:
(defmessage-handler MAIN::USER foo
   (?self:bar
CLIPS> (defmessage-handler USER foo ()
  (bind ?self 1))
[MSGPSR5] Active instance parameter cannot be changed.

ERROR:
(defmessage-handler MAIN::USER foo
   ()
   (bind ?self 1)
   )
CLIPS> (defmessage-handler USER foo ()
  (dynamic-put bar 1))
CLIPS> (clear)
CLIPS> (defclass A (is-a USER) (role concrete)
  (slot foo (create-accessor write)))
CLIPS> (definstances A-objects
  (a of A 
    (foo (build "(definstances A-objects (b of A))"))))
CLIPS> (reset)

[CSTRCPSR4] Cannot redefine definstances A-objects while it is in use.

ERROR:
(definstances MAIN::A-objects
CLIPS> (any-instancep ((?a OBJECT) (?a OBJECT)) TRUE)
[INSQYPSR1] Duplicate instance member variable name in function any-instancep.
CLIPS> (any-instancep ((?a OBJECT) (?b OBJECT)) 
  (bind ?c 1))
[INSQYPSR2] Binds are not allowed in instance-set query in function any-instancep.
CLIPS> (do-for-all-instances ((?a USER)) 
  (if (slot-existp ?a age) then
     (> ?a:age 30))
  (bind ?a (send ?a get-brother)))
[INSQYPSR3] Cannot rebind instance-set member variable a in function do-for-all-instances.
CLIPS> (dribble-off)
