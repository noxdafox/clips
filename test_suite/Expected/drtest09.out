TRUE
CLIPS> (batch "drtest09.bat")
TRUE
CLIPS> (clear)                   ; DR0801
CLIPS> (setgen 1)
1
CLIPS> (unwatch all)
CLIPS> (watch instances)
CLIPS> (watch activations)
CLIPS> (watch rules)
CLIPS> 
(defclass A (is-a USER)
  (role concrete)
  (pattern-match reactive)
  (slot match (default yes) (create-accessor read-write))
  (slot container (create-accessor read-write)))
CLIPS>   
(defmessage-handler A delete before ()
  (if (instance-existp ?self:container) then
     (unmake-instance ?self:container)))
CLIPS>      
(defrule A-rule
  (logical ?obj <- (object (is-a A) (match yes)))
=>
  (send ?obj put-container 
      (make-instance of A (match no)
                          (container (make-instance of INITIAL-OBJECT))))
  (send ?obj put-match no))
CLIPS> (make-instance a of A)
==> instance [a] of A
==> Activation 0      A-rule: [a]
[a]
CLIPS> (run)
FIRE    1 A-rule: [a]
==> instance [gen1] of A
==> instance [gen2] of INITIAL-OBJECT
<== instance [gen2] of INITIAL-OBJECT
<== instance [gen1] of A
CLIPS> (unwatch all)
CLIPS> (clear)                   ; DR0802
CLIPS> 
(defclass A (is-a USER)
  (role concrete)
  (slot foo (default bar)))
CLIPS>   
(defmessage-handler A delete after ()
  (printout t ?self:foo crlf))
CLIPS> (unmake-instance (make-instance of A))
[INSFUN4] Invalid instance-address in function for slot get.
[PRCCODE4] Execution halted during the actions of message-handler delete after in class A
TRUE
CLIPS> (clear)                   ; DR0803
CLIPS> 
(defclass A
   (is-a USER)
  (role concrete)
  (pattern-match reactive)
  (multislot data
    (create-accessor read-write)))
CLIPS>     
(defrule rule1
  (object (is-a A) (data 0 ?x))
  (object (is-a A) (data 1 ?x))
  =>
  (printout t ?x crlf))
CLIPS> 
(definstances objects
  (a of A (data 0 0))
  (b of A (data 1 0))
  (c of A (data 1 1)))
CLIPS> (reset)
CLIPS> (agenda)
0      rule1: [a],[b]
For a total of 1 activation.
CLIPS> (clear)                   ; DR0804
CLIPS> 
(deffunction imfi (?cv)
   (bind ?position 3)
   (while TRUE do
     (bind ?nv (+ (nth$ ?position ?cv) 1))
     (if (<= ?nv 9)
        then 
        (return (replace$ ?cv ?position ?position ?nv)))
     (bind ?cv (replace$ ?cv ?position ?position 1))
     (bind ?position (- ?position 1))
     (if (< ?position 1) then (return FALSE))))
CLIPS>  
(deffunction optimize ()
   (bind ?current-settings (create$ 1 1 1))
   (while (neq ?current-settings FALSE)
      (bind ?current-settings (imfi ?current-settings))))
CLIPS> (reset)
CLIPS> (optimize)
FALSE
CLIPS> (clear)                   ; DR0805
CLIPS> (setgen 1)
1
CLIPS> 
(defclass A
   (is-a USER)
   (role concrete)
   (pattern-match reactive)
   (multislot data
      (create-accessor read-write)))
CLIPS> 
(defrule rule1
   (object (is-a A) (data ? red ?x&green))
   (object (is-a A) (data ? red ?x))
   =>)
CLIPS> (make-instance of A (data orange red green))
[gen1]
CLIPS> (matches rule1)
Matches for Pattern 1
[gen1]
Matches for Pattern 2
[gen1]
Partial matches for CEs 1 - 2
[gen1],[gen1]
Activations
[gen1],[gen1]
(2 1 1)
CLIPS> (clear)                   ; DR0806
CLIPS> (setgen 1)
1
CLIPS> 
(defclass A (is-a INITIAL-OBJECT)
   (multislot foo))
CLIPS> 
(defclass B (is-a A)
   (slot foo))
CLIPS> 
(defrule AB
   (object (is-a A) (foo ?val))
   =>
   (printout t ?val crlf))
CLIPS> (make-instance of B)
[gen1]
CLIPS> (run)
nil
CLIPS> (clear)                   ; DR0807
CLIPS> (insert$ (rest$ (create$ abc def)) 2 ghi)
(def ghi)
CLIPS> (clear)                   ; DR0808
CLIPS> (assert (m))
<Fact-1>
CLIPS> (assert (a))
<Fact-2>
CLIPS> (defrule r1 (m) (not (a)) =>)
CLIPS> (defrule r2 (m) (not (a)) (not (b)) =>)
CLIPS> (agenda)
CLIPS> (clear)                   ; DR0809
CLIPS> (deffunction pins () (ppinstance))
CLIPS> (defmessage-handler USER pins () (pins))
CLIPS> (defclass A (is-a USER) (role concrete))
CLIPS> (make-instance a of A)
[a]
CLIPS> (send [a] pins)
[MSGFUN4] ppinstance may only be called from within message-handlers.
[PRCCODE4] Execution halted during the actions of deffunction pins.
[PRCCODE4] Execution halted during the actions of message-handler pins primary in class USER
FALSE
CLIPS> (clear)                   ; DR0810
CLIPS> (deffunction MAIN::foo
   (?garbage)
   (setgen 1)
   (loop-for-count ?garbage
      (make-instance of INITIAL-OBJECT))
   (delayed-do-for-all-instances ((?ins INITIAL-OBJECT))
      TRUE
      (progn
         (unmake-instance *)
         (return (gensym*)))))
CLIPS> (foo 100)
gen101
CLIPS> (foo 500)
gen501
CLIPS> (clear)                   ; DR0813
CLIPS> 
(defclass A (is-a INITIAL-OBJECT)
   (multislot foo (create-accessor read-write)))
CLIPS> 
(defrule A
   (fact ?v)
   (not (object (is-a A) (foo $? ?v $?)))
=>)
CLIPS> (assert (fact a))
<Fact-1>
CLIPS> (make-instance a of A (foo a b c))
[a]
CLIPS> (make-instance b of A (foo a b c))
[b]
CLIPS> 
(object-pattern-match-delay
   (modify-instance a (foo q))
   (modify-instance b (foo q)))
TRUE
CLIPS> (clear)                   ; DR0815
CLIPS> 
(defclass grammy (is-a USER)
    (role concrete)
    (pattern-match reactive)
    (multislot  text
    (create-accessor write)
    (type SYMBOL)))
CLIPS> 
(defmessage-handler grammy print before ()
    (printout t crlf)
    (printout t "******  starting to print   ****"  ?self crlf))
CLIPS> 
(defmessage-handler grammy print after ()
    (printout t "******  starting to print   ****"  ?self crlf)
    (printout t crlf))
CLIPS> 
(deffunction resize (?xlist)
   (if (= (length$ ?xlist)  0)
     then
     (printout t "got to here !!! "  crlf)
     (return)
     else
     (make-instance (gensym) of grammy
         (text (subseq$ ?xlist 1 9))))
     (resize (subseq$ ?xlist 10 (length$ ?xlist))))
CLIPS> 
(deffunction ask ()
   (do-for-all-instances ((?tag grammy)) (instancep ?tag)
      (send ?tag print)))
CLIPS> 
(defrule commence  "make it happen"
   =>
   (resize (create$ a b c d e f g h i j k l m n)))
CLIPS> (reset)
CLIPS> (run)
got to here !!! 
CLIPS> (clear)                   ; DR0816
CLIPS> 
(defclass A
	  (is-a USER)
	  (role concrete)
	  (slot str
	    (create-accessor read-write)
	    (type STRING))
	  (slot length
	    (create-accessor read-write)
	    (type INTEGER)))
CLIPS> 
(defmessage-handler A put-str after (?value)
   (bind ?self:length 3))
CLIPS> (make-instance a of A (str 4))
[a]
CLIPS> (send [a] get-length)
3
CLIPS> (clear)                   ; DR0817
CLIPS> 
(deftemplate status 
   (slot search-depth)
   (slot parent))
CLIPS> 
(defrule move-alone 
  ?node <- (status)
  =>
  (duplicate ?node (search-depth =(+ 1 3))
                   (parent ?node)))
CLIPS> (ppdefrule move-alone) 
(defrule MAIN::move-alone
   ?node <- (status)
   =>
   (duplicate ?node (search-depth =(+ 1 3)) (parent ?node)))
CLIPS>  
(deftemplate dbdata
  (multislot values))
CLIPS>  
(defrule bug1
  =>
  (assert (dbdata (values (create$ 1 2)))))
CLIPS> (ppdefrule bug1)
(defrule MAIN::bug1
   =>
   (assert (dbdata (values (create$ 1 2)))))
CLIPS>  
(defrule bug2
  =>
  (assert (dbdata (values (create$ 1 2) (create$ 3 4)))))
CLIPS> (ppdefrule bug2)    
(defrule MAIN::bug2
   =>
   (assert (dbdata (values (create$ 1 2) (create$ 3 4)))))
CLIPS>  
(deftemplate foo 
   (field x) 
   (multifield y))
CLIPS>  
(deffacts d5 (foo (y a)))
CLIPS> (ppdeffacts d5)
(deffacts MAIN::d5
   (foo (y a)))
CLIPS> (deffacts d6 (foo (y a b)) (b) (foo (x 3)) (d))
CLIPS> (ppdeffacts d6)
(deffacts MAIN::d6
   (foo (y a b))
   (b)
   (foo (x 3))
   (d))
CLIPS> (clear)                   ; DR0818
CLIPS> (defmodule A (export ?ALL))
CLIPS> (defgeneric A::foo)
CLIPS> (defmethod A::foo ((?arg NUMBER)))
CLIPS> (defmodule B (import A ?ALL))
CLIPS> (defclass B (is-a USER))
CLIPS> (defmethod B::foo ((?arg B)))

[CSTRCPSR3] Cannot define defgeneric foo because of an import/export conflict.

ERROR:
(defmethod B::foo
CLIPS> (clear)                   ; DR0819
CLIPS> 
(defclass A 
   (is-a INITIAL-OBJECT)
   (multislot foo (create-accessor read-write)))
CLIPS> (make-instance a of A)
[a]
CLIPS> (modify-instance [a] (foo 4))
TRUE
CLIPS> (send [a] print)
[a] of A
(foo 4)
CLIPS> (clear)                   ; DR0820
CLIPS> 
(defclass A (is-a USER)
   (role concrete)
   (slot iii 
      (type INTEGER)
      (default -1)
      (visibility public)
      (create-accessor read-write)))
CLIPS> 
(defclass B (is-a USER)
   (role concrete)
   (slot ooo 
      (type INSTANCE)
      (visibility public)
      (create-accessor read-write)))
CLIPS> 
(defmessage-handler B init after ()
   (send [a] put-iii 23)
   (printout t "1st output line: iii = " (send [a] get-iii) crlf)
   (initialize-instance [a])
   (printout t "2nd output line: iii = " (send [a] get-iii) crlf))
CLIPS> 
(defrule test
   (initial-fact)
   =>
   (make-instance [a] of A)
   (make-instance [b] of B))
CLIPS> (reset)
CLIPS> (run)
1st output line: iii = 23
2nd output line: iii = -1
CLIPS> (clear)
CLIPS> (watch slots)
CLIPS> 
(defclass A (is-a USER)
  (role concrete)
  (slot foo
    (create-accessor read-write)
    (access initialize-only)))
CLIPS> (make-instance a of A)
::= local slot foo in instance a <- nil
[a]
CLIPS> 
(defclass B (is-a USER)
  (role concrete)
  (slot bar
     (create-accessor read-write)
     (default-dynamic (send [a] put-foo blah))))
CLIPS> (make-instance of B)
[MSGFUN3] foo slot in [a] of A: write access denied.
[PRCCODE4] Execution halted during the actions of message-handler put-foo primary in class A
[PRCCODE4] Execution halted during the actions of message-handler init primary in class USER
[INSMNGR8] An error occurred during the initialization of instance gen504.
FALSE
CLIPS> (unwatch slots)
CLIPS> (clear)                   ; DR0821
CLIPS> 
(deffunction function2 ()
  (subseq$ (create$ 3 (+ 3 1)) 1 1))
CLIPS> 
(deffunction function1 ()
   (bind ?str "")
   (bind ?result (function2))
   (loop-for-count 3
      (bind ?str (str-cat ?str " ")))) 
CLIPS> (loop-for-count 1000 (function1))
FALSE
CLIPS> (clear)
CLIPS> (clear)                   ; DR0824
CLIPS> 
(defclass c
   (is-a USER)
   (role concrete)
   (slot s
      (access initialize-only)
      (visibility public)
      (create-accessor read-write)))
CLIPS> 
(defmessage-handler c init after
   ()
   (bind ?self:s (+ ?self:s 1)))
CLIPS> (make-instance of c (s 1))
[gen505]
CLIPS> (clear)                   ; DR0825
CLIPS> 
(defclass EXAMPLE
   (is-a USER)
   (role concrete)
   (slot x))
CLIPS> (restore-instances bug825.ins)

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for make-instance.
[INSFILE1] Function restore-instances could not completely process file bug825.ins.
1
CLIPS> (clear)
CLIPS> (progn (release-mem) TRUE)
TRUE
CLIPS> (clear)                   ; DR0831
CLIPS> (defmodule MAIN (export ?ALL))
CLIPS> (defmodule M (import MAIN ?ALL) (export ?ALL))
CLIPS> (deffunction MAIN::problem (?x))
CLIPS> (save "Temp//bug.clp")
TRUE
CLIPS> (clear)
CLIPS> (load "Temp//bug.clp")
+!!+
TRUE
CLIPS> (clear)                   ; DR0834
CLIPS> 
(deffacts Stuff
   (Value)
   (AxisLine))  
CLIPS> 
(defrule r1
   (initial-fact)
   (not (and (Value) 
             (not (AxisLine))))
   (not (AxisLine))
   (not (Bogus))
   =>)
CLIPS> (reset)
CLIPS> (retract 2)
CLIPS> (run)
CLIPS> (clear)                   ; DR0835
CLIPS> 
(explode$
   (nth$ 1 (explode$
      (nth$ 1 (explode$
         (nth$ 1 (explode$
            (implode$ (create$
               (implode$ (create$
                  (implode$ (create$
                     (implode$ (create$ a b c)))))))))))))))
(a b c)
CLIPS> (clear)                   ; DR0837
CLIPS> (assert-string "()dfj )))(")

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for first field of a RHS pattern.
FALSE
CLIPS> (assert-string ")(dsf")

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for RHS patterns.
FALSE
CLIPS> (clear)                   ; DR0839
CLIPS> (ppdefclass asd)
[PRNTUTIL1] Unable to find defclass asd.
CLIPS> (ppdefclass MAIN::dip)
[PRNTUTIL1] Unable to find defclass MAIN::dip.
CLIPS> (ppdefclass uiui::gop)
[PRNTUTIL1] Unable to find defclass uiui::gop.
CLIPS> (clear)                   ; DR0840
CLIPS> 
(defmodule A
   (export deftemplate template))
CLIPS> (deftemplate A::template)
CLIPS> 
(defmodule B
   (import A deftemplate template))
CLIPS> (save "Temp//bug.tmp")
TRUE
CLIPS> (clear)
CLIPS> (load "Temp//bug.tmp")
+%+
TRUE
CLIPS> (clear)
CLIPS> (load mab.clp)
%%%%********************************
TRUE
CLIPS> (save "Temp//bug.tmp")
TRUE
CLIPS> (clear)
CLIPS> (load "Temp//bug.tmp")
%%%%********************************
TRUE
CLIPS> (clear)
CLIPS> (load dilemma1.clp)
+%$$****+***+%***
TRUE
CLIPS> (save "Temp//bug.tmp")
TRUE
CLIPS> (clear)
CLIPS> (load "Temp//bug.tmp")
+%$$****+***+%***
TRUE
CLIPS> (clear)
CLIPS> (load dilemma2.clp)
#!!!*~~~~~~~
TRUE
CLIPS> (save "Temp//bug.tmp")
TRUE
CLIPS> (clear)
CLIPS> (load "Temp//bug.tmp")
!!!#~~~~~~~!!!*
TRUE
CLIPS> (clear)
CLIPS> (load wordgame.clp)
***
TRUE
CLIPS> (save "Temp//bug.tmp")
TRUE
CLIPS> (clear)
CLIPS> (load "Temp//bug.tmp")
***
TRUE
CLIPS> (clear)
CLIPS> (load zebra.clp)
%****
TRUE
CLIPS> (save "Temp//bug.tmp")
TRUE
CLIPS> (clear)
CLIPS> (load "Temp//bug.tmp")
%****
TRUE
CLIPS> (clear)
CLIPS> (load electrnc.clp)
##~#~#~##~#~###!~#!~#!~#!~#!~#~#!^&&&&:::!!******
TRUE
CLIPS> (load circuit3.clp)
@!
TRUE
CLIPS> (save "Temp//bug.tmp")
TRUE
CLIPS> (clear)
CLIPS> (load "Temp//bug.tmp")
!!!!!!!!^:::##~#~#~##~#~###~#~#~#~#~#~#@!!!!!!!!******&&&&
TRUE
CLIPS> (clear)
CLIPS> (load mabobj.clp)
####*******************************@
TRUE
CLIPS> (save "Temp//bug.tmp")
TRUE
CLIPS> (clear)
CLIPS> (load "Temp//bug.tmp")
####@*******************************
TRUE
CLIPS> (clear)
CLIPS> (load objfarm.clp)
+##@****+***+#***
TRUE
CLIPS> (save "Temp//bug.tmp")
TRUE
CLIPS> (clear)
CLIPS> (load "Temp//bug.tmp")
+##@****+***+#***
TRUE
CLIPS> (clear)
CLIPS> (load wrdgmobj.clp)
###***
TRUE
CLIPS> (save "Temp//bug.tmp")
TRUE
CLIPS> (clear)
CLIPS> (load "Temp//bug.tmp")
###***
TRUE
CLIPS> (clear)
CLIPS> (load wine.clp)
+!%**+%***+$+%******+*$+$%$*+****
TRUE
CLIPS> (save "Temp//bug.tmp")
TRUE
CLIPS> (clear)
CLIPS> (load "Temp//bug.tmp")
+!%!**+%***+$+%******+$*+%$$*+****
TRUE
CLIPS> (clear)
CLIPS> (clear)                   ; DR0848
CLIPS> 
(defrule test1 
   (hihi ?a $?m) 
   => 
   (progn$ (?each ?m) 
      (printout t "Value=" ?each " Index=" ?each-index crlf)))
CLIPS> (assert (hihi alpha bravo charli david echo))
<Fact-1>
CLIPS> (run)
Value=bravo Index=1
Value=charli Index=2
Value=david Index=3
Value=echo Index=4
CLIPS> (clear)                   ; DR0849
CLIPS> 
(defclass FRIDGE
   (is-a USER)
   (multislot contents))
CLIPS> 
(definstances test
   (fridge-1 of FRIDGE (contents a b c d)))
CLIPS> (reset)
CLIPS> (member$ (first$ (rest$ (send [fridge-1] get-contents))) (send [fridge-1] get-contents))
2
CLIPS> (member$ (first$ (rest$ (send [fridge-1] get-contents))) (rest$ (send [fridge-1] get-contents)))
1
CLIPS> (clear)                   ; DR0854
CLIPS> 
(deffunction foobar (?a ?b ?c)
   (printout t ?a " " ?b " " ?c crlf))
CLIPS> (funcall foobar 1)
[ARGACCES4] Function foobar expected exactly 3 argument(s)
[MISCFUN4] Function funcall called with the wrong number of arguments for deffunction foobar
FALSE
CLIPS> (clear)                   ; DR0855
CLIPS> (fetch
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
)
[TEXTPRO1] Could not open file "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa".
FALSE
CLIPS> (clear)                   ; DR0856
CLIPS> (constructs-to-c
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
1)
[CONSCOMP1] Aborting because the base file name may cause the fopen maximum of 1024 to be violated when file names are generated.
CLIPS> (clear)                   ; DR0857
CLIPS> 
(defclass
CLASSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
(is-a OBJECT))
CLIPS> (profile constructs)
CLIPS> (profile-info)
Profile elapsed time = 0.005962 seconds ;; Different number is OK
Construct Name                           Entries         Time           %          Time+Kids     %+Kids
--------------                           -------        ------        -----        ---------     ------
CLIPS> (profile off)
CLIPS> (clear)                   ; DR0858
CLIPS> 
(defmodule
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa)
CLIPS> 
(deffunction
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa::foo
()))
CLIPS> (get-deffunction-list *)
(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa::foo)
CLIPS> (clear)                   ; DR0867
CLIPS> 
(defrule Bad-Rule ""
   (exists (C))
   (not (B))
   =>)
CLIPS> (watch activations)
CLIPS> (reset)
CLIPS> (reset)
CLIPS> (agenda)
CLIPS> (unwatch activations)
CLIPS> (clear)                   ; DR0870
CLIPS> 
(defclass A (is-a USER)
   (slot x (default ?NONE)))
CLIPS> (slot-default-value A x)
?NONE
CLIPS> (clear)                   ; DR0872
CLIPS> (load dr0872-1.clp)
!
[PRNTUTIL2] Syntax Error:  Check appropriate syntax for deffunction.

ERROR:
(deffunction MAIN::testUnmatched
   ()
   (+ 3 4)
   

FALSE
CLIPS> (load dr0872-2.clp)
&
[PRNTUTIL2] Syntax Error:  Check appropriate syntax for defmethod.

ERROR:
(defmethod MAIN::foo
   ()
   (+ 3 4)
   

FALSE
CLIPS> (clear)                   ; DR0873
CLIPS> 
(defclass A
   (is-a USER) 
   (slot x)) 
CLIPS> 
(defclass B
   (is-a USER) 
   (slot y)) 
CLIPS> 
(definstances initialization 
   (ob1 of A (x 1)) 
   (ob2 of B (y 1))) 
CLIPS> 
(defrule one 
   (object (is-a A) 
           (x ~0)) 
   (object (is-a B) 
           (y ?val)) 
   (test (> ?val 0)) 
   =>)
CLIPS>    
(defrule trigger
   =>
   (object-pattern-match-delay
      (modify-instance [ob1] (x 2))
      (make-instance [ob2] of B (y 2))))
CLIPS> (reset)
CLIPS> (run)
CLIPS> (clear)                   ; DR0874
CLIPS> (undefrule MAIN::)
[PRNTUTIL1] Unable to find defrule MAIN::.
CLIPS> (clear)                   ; DR0877
CLIPS> 
(deftemplate foo (multislot bar) (multislot yak))
CLIPS> 
(deffacts init
   (foo (bar) (yak)))
CLIPS>    
(deffunction callit (?c)
    (loop-for-count (?i ?c)
       (do-for-fact ((?f foo)) TRUE
          (bind ?b1 ?f:bar)
          (bind ?b2 ?f:yak)
          (assert (foo (bar ?b1 ?i) (yak ?b2 (- ?c ?i))))
          (retract ?f))))
CLIPS>       
(defrule doit
    =>
    (callit 2000))
CLIPS> (reset)
CLIPS> (run)
CLIPS> (clear)                   ; DR0878
CLIPS> (funcall assert foo a b c)
[ARGACCES5] Function funcall expected argument #1 to be of type function without specialized parser
FALSE
CLIPS> (clear)                   ; DR0879
CLIPS> (assert (a) (b) (c))
<Fact-3>
CLIPS> (implode$ (get-fact-list))
"<Fact-0> <Fact-1> <Fact-2> <Fact-3>"
CLIPS> (clear)                   ; DR0880
CLIPS> (deftemplate matrix (slot ID) (slot JD))
CLIPS> (deffacts blah (matrix (ID 5) (JD 5)))
CLIPS> (reset)
CLIPS> 
(defrule rule1
   (matrix (ID 5) (JD 3))
   =>)
CLIPS> 
(defrule rule2
   (matrix (ID 5))
   =>)
CLIPS> (agenda)
0      rule2: f-1
For a total of 1 activation.
CLIPS> (reset)
CLIPS> (agenda)
0      rule2: f-1
For a total of 1 activation.
CLIPS> (clear)                   ; SourceForge 1881324: CLIPS 6.3 Beta Release 2
CLIPS> 
(deftemplate as_score 
   (slot segment_id) 
   (slot score))
CLIPS> 
(deffacts as_score_info 
   (as_score (segment_id 11)(score 5)) 
   (as_score (segment_id 12)(score 9))) 
CLIPS> (reset)
CLIPS> (facts)
f-0     (initial-fact)
f-1     (as_score (segment_id 11) (score 5))
f-2     (as_score (segment_id 12) (score 9))
For a total of 3 facts.
CLIPS> (reset)
CLIPS> (facts)
f-0     (initial-fact)
f-1     (as_score (segment_id 11) (score 5))
f-2     (as_score (segment_id 12) (score 9))
For a total of 3 facts.
CLIPS> (clear)
CLIPS> (clear)                   ; SourceForge 1881324: CLIPS 6.3 Beta Release 3
CLIPS> 
(deftemplate TAG2200 
   (slot Doc-Address))
CLIPS>    
(defrule bug ""
   (TAG2200 (Doc-Address ?DA1) )
   (not (create-doc-shipper))
   (test (eq ?DA1 ""))
   =>)
CLIPS>  
(reset)
CLIPS> (assert (TAG2200 (Doc-Address "")))
<Fact-1>
CLIPS> (assert (create-doc-shipper))
<Fact-2>
CLIPS> 
(clear)                   ; DR0881
CLIPS> (unwatch all)   
CLIPS> 
(defrule detect
   (b ?b)
   (exists (a))
   (test (eq ?b 2))
   =>
   (printout t "Rule Fired" crlf))
CLIPS> (assert (a))
<Fact-1>
CLIPS> (assert (b 1))
<Fact-2>
CLIPS> (run)
CLIPS> (reset)
CLIPS> (assert (b 1))
<Fact-1>
CLIPS> (assert (a))
<Fact-2>
CLIPS> (run)
CLIPS> (reset)
CLIPS> (assert (a))
<Fact-1>
CLIPS> (assert (b 2))
<Fact-2>
CLIPS> (run)
Rule Fired
CLIPS> (reset)
CLIPS> (assert (b 2))
<Fact-1>
CLIPS> (assert (a))
<Fact-2>
CLIPS> (run)
Rule Fired
CLIPS> (clear)                   ; CLIPSESG Issue
CLIPS> (defclass BEO (is-a USER) (multislot de) (multislot en))
CLIPS> (make-instance of BEO)
[gen506]
CLIPS> (make-instance of BEO)
[gen507]
CLIPS> (bsave-instances "Temp//d.bins")
3
CLIPS> (reset)
CLIPS> (bload-instances "Temp//d.bins")
3
CLIPS> (dribble-off)
