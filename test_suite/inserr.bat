(send)
(send object)
(send object bad-message)
(make-instance)
(make-instance 5 of USER)
(defclass TEST (is-a USER) (role concrete)
   (slot x (create-accessor write))
   (multislot y (create-accessor write)))
(make-instance bad TEST)
(make-instance bad of)
(make-instance (bad of TEST))
(make-instance ([bad] of  TEST))
(make-instance bad of TEST ())
(make-instance bad of TEST (bogus-slot))
(defmessage-handler TEST init around ())
(make-instance bad of TEST)
(undefmessage-handler TEST init around)
(defmessage-handler TEST delete around ())
(make-instance ok of TEST)
(make-instance ok of TEST)
(undefmessage-handler TEST delete around)
(make-instance bad of TEST (x abc def))
(make-instance bad of TEST (x abc) (y 1 2 (+ (eval "(gensym)") 2)))
(clear)
(definstances)
(definstances 5)
(definstances bad bad-comment)
(definstances ok "comment")
(definstances bad "comment" ())
(definstances bad (5))
(definstances bad (a))
(definstances bad ([a]))
(definstances bad (a of))
(definstances bad1 (a of BOGUS) (b of USER))
(definstances bad2 (b of USER) (a of BOGUS))
(reset)
(clear)
(initialize-instance)
(initialize-instance 5)
(initialize-instance a)
(initialize-instance ())
(defclass TEST (is-a USER) (role concrete)
  (slot x  (create-accessor write)
     (default-dynamic (+ (eval "(gensym)") 2))))
(make-instance a of TEST)
(make-instance a of TEST (x 0))
(initialize-instance a ())
(initialize-instance a (x abc def))
(delete-instance 0)
(init-slots 0)
(ppinstance 0)
