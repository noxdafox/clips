   /*******************************************************/
   /*      "C" Language Integrated Production System      */
   /*                                                     */
   /*             CLIPS Version 6.40  08/25/16            */
   /*                                                     */
   /*              DEFFUNCTION HEADER FILE                */
   /*******************************************************/

/*************************************************************/
/* Purpose:                                                  */
/*                                                           */
/* Principal Programmer(s):                                  */
/*      Brian L. Dantes                                      */
/*      Gary D. Riley                                        */
/*                                                           */
/* Contributing Programmer(s):                               */
/*                                                           */
/* Revision History:                                         */
/*                                                           */
/*      6.23: Correction for FalseSymbol/TrueSymbol. DR0859  */
/*                                                           */
/*            Corrected compilation errors for files         */
/*            generated by constructs-to-c. DR0861           */
/*                                                           */
/*            Changed name of variable log to logName        */
/*            because of Unix compiler warnings of shadowed  */
/*            definitions.                                   */
/*                                                           */
/*      6.24: Renamed BOOLEAN macro type to intBool.         */
/*                                                           */
/*            Corrected code to remove run-time program      */
/*            compiler warning.                              */
/*                                                           */
/*      6.30: Removed conditional code for unsupported       */
/*            compilers/operating systems (IBM_MCW,          */
/*            MAC_MCW, and IBM_TBC).                         */
/*                                                           */
/*            Changed integer type/precision.                */
/*                                                           */
/*            Added missing initializer for ENTITY_RECORD.   */
/*                                                           */
/*            Added const qualifiers to remove C++           */
/*            deprecation warnings.                          */
/*                                                           */
/*            Converted API macros to function calls.        */
/*                                                           */
/*            Changed find construct functionality so that   */
/*            imported modules are search when locating a    */
/*            named construct.                               */
/*                                                           */
/*      6.40: Removed LOCALE definition.                     */
/*                                                           */
/*            Pragma once and other inclusion changes.       */
/*                                                           */
/*            Added support for booleans with <stdbool.h>.   */
/*                                                           */
/*            Removed use of void pointers for specific      */
/*            data structures.                               */
/*                                                           */
/*            ALLOW_ENVIRONMENT_GLOBALS no longer supported. */
/*                                                           */
/*            UDF redesign.                                  */
/*                                                           */
/*************************************************************/

#ifndef _H_dffnxfun

#pragma once

#define _H_dffnxfun

typedef struct deffunction Deffunction;
typedef struct deffunctionModuleData DeffunctionModuleData;

#include "conscomp.h"
#include "cstrccom.h"
#include "evaluatn.h"
#include "expressn.h"
#include "moduldef.h"
#include "symbol.h"

struct deffunctionModuleData
  {
   struct defmoduleItemHeader header;
  };

struct deffunction
  {
   struct constructHeader header;
   unsigned busy;
   unsigned executing;
   bool trace;
   EXPRESSION *code;
   int minNumberOfParameters;
   int maxNumberOfParameters;
   int numberOfLocalVars;
  };

#define DEFFUNCTION_DATA 23

struct deffunctionData
  {
   struct construct *DeffunctionConstruct;
   int DeffunctionModuleIndex;
   ENTITY_RECORD DeffunctionEntityRecord;
#if DEBUGGING_FUNCTIONS
   bool WatchDeffunctions;
#endif
   struct CodeGeneratorItem *DeffunctionCodeItem;
   Deffunction *ExecutingDeffunction;
#if (! BLOAD_ONLY) && (! RUN_TIME)
   struct token DFInputToken;
#endif
  };

#define DeffunctionData(theEnv) ((struct deffunctionData *) GetEnvironmentData(theEnv,DEFFUNCTION_DATA))

   bool                           CheckDeffunctionCall(Environment *,Deffunction *,int);
   void                           DeffunctionGetBind(CLIPSValue *);
   void                           DFRtnUnknown(CLIPSValue *);
   void                           DFWildargs(CLIPSValue *);
   const char                    *EnvDeffunctionModule(Environment *,Deffunction *);
   Deffunction                   *EnvFindDeffunction(Environment *,const char *);
   Deffunction                   *EnvFindDeffunctionInModule(Environment *,const char *);
   void                           EnvGetDeffunctionList(Environment *,CLIPSValue *,Defmodule *);
   const char                    *EnvGetDeffunctionName(Environment *,Deffunction *);
   CLIPSLexeme                   *EnvGetDeffunctionNamePointer(Environment *,Deffunction *);
   const char                    *EnvGetDeffunctionPPForm(Environment *,Deffunction *);
   Deffunction                   *EnvGetNextDeffunction(Environment *,Deffunction *);
   bool                           EnvIsDeffunctionDeletable(Environment *,Deffunction *);
   void                           EnvSetDeffunctionPPForm(Environment *,Deffunction *,const char *);
   bool                           EnvUndeffunction(Environment *,Deffunction *);
   void                           GetDeffunctionListFunction(Environment *,UDFContext *,CLIPSValue *);
   void                           GetDeffunctionModuleCommand(Environment *,UDFContext *,CLIPSValue *);
   Deffunction                   *LookupDeffunctionByMdlOrScope(Environment *,const char *);
   Deffunction                   *LookupDeffunctionInScope(Environment *,const char *);
#if (! BLOAD_ONLY) && (! RUN_TIME)
   void                           RemoveDeffunction(Environment *,Deffunction *);
#endif
   void                           SetupDeffunctions(Environment *);
   void                           UndeffunctionCommand(Environment *,UDFContext *,CLIPSValue *);
#if DEBUGGING_FUNCTIONS
   bool                           EnvGetDeffunctionWatch(Environment *,Deffunction *);
   void                           EnvListDeffunctions(Environment *,const char *,Defmodule *);
   void                           EnvSetDeffunctionWatch(Environment *,bool,Deffunction *);
   void                           ListDeffunctionsCommand(Environment *,UDFContext *,CLIPSValue *);
   void                           PPDeffunctionCommand(Environment *,UDFContext *,CLIPSValue *);
#endif

#endif /* _H_dffnxfun */






