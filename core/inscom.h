   /*******************************************************/
   /*      "C" Language Integrated Production System      */
   /*                                                     */
   /*             CLIPS Version 6.40  08/06/16            */
   /*                                                     */
   /*                                                     */
   /*******************************************************/

/*************************************************************/
/* Purpose:                                                  */
/*                                                           */
/* Principal Programmer(s):                                  */
/*      Brian L. Dantes                                      */
/*                                                           */
/* Contributing Programmer(s):                               */
/*                                                           */
/* Revision History:                                         */
/*                                                           */
/*      6.23: Correction for FalseSymbol/TrueSymbol. DR0859  */
/*                                                           */
/*            Corrected compilation errors for files         */
/*            generated by constructs-to-c. DR0861           */
/*                                                           */
/*      6.24: Loading a binary instance file from a run-time */
/*            program caused a bus error. DR0866             */
/*                                                           */
/*            Removed LOGICAL_DEPENDENCIES compilation flag. */
/*                                                           */
/*            Converted INSTANCE_PATTERN_MATCHING to         */
/*            DEFRULE_CONSTRUCT.                             */
/*                                                           */
/*            Renamed BOOLEAN macro type to intBool.         */
/*                                                           */
/*      6.30: Removed conditional code for unsupported       */
/*            compilers/operating systems (IBM_MCW,          */
/*            MAC_MCW, and IBM_TBC).                         */
/*                                                           */
/*            Changed integer type/precision.                */
/*                                                           */
/*            Changed garbage collection algorithm.          */
/*                                                           */
/*            Added const qualifiers to remove C++           */
/*            deprecation warnings.                          */
/*                                                           */
/*            Converted API macros to function calls.        */
/*                                                           */
/*      6.40: Removed LOCALE definition.                     */
/*                                                           */
/*            Pragma once and other inclusion changes.       */
/*                                                           */
/*            Added support for booleans with <stdbool.h>.   */
/*                                                           */
/*            Removed use of void pointers for specific      */
/*            data structures.                               */
/*                                                           */
/*            ALLOW_ENVIRONMENT_GLOBALS no longer supported. */
/*                                                           */
/*************************************************************/

#ifndef _H_inscom

#pragma once

#define _H_inscom

#include "insfun.h"
#include "object.h"

#define INSTANCE_DATA 29

struct instanceData
  { 
   Instance DummyInstance;
   Instance **InstanceTable;
   bool MaintainGarbageInstances;
   bool MkInsMsgPass;
   bool ChangesToInstances;
   IGARBAGE *InstanceGarbageList;
   struct patternEntityRecord InstanceInfo;
   Instance *InstanceList;  
   unsigned long GlobalNumberOfInstances;
   Instance *CurrentInstance;
   Instance *InstanceListBottom;
   bool ObjectModDupMsgValid;
  };

#define InstanceData(theEnv) ((struct instanceData *) GetEnvironmentData(theEnv,INSTANCE_DATA))

   void                           SetupInstances(Environment *);
   bool                           EnvDeleteInstance(Environment *,Instance *);
   bool                           EnvUnmakeInstance(Environment *,Instance *);
#if DEBUGGING_FUNCTIONS
   void                           InstancesCommand(Environment *);
   void                           PPInstanceCommand(Environment *);
   void                           EnvInstances(Environment *,const char *,Defmodule *,const char *,bool);
#endif
   Instance                      *EnvMakeInstance(Environment *,const char *);
   Instance                      *EnvCreateRawInstance(Environment *,Defclass *,const char *);
   Instance                      *EnvFindInstance(Environment *,Defmodule *,const char *,bool);
   bool                           EnvValidInstanceAddress(Environment *,Instance *);
   void                           EnvDirectGetSlot(Environment *,Instance *,const char *,DATA_OBJECT *);
   bool                           EnvDirectPutSlot(Environment *,Instance *,const char *,DATA_OBJECT *);
   const char                    *EnvGetInstanceName(Environment *,Instance *);
   Defclass                      *EnvGetInstanceClass(Environment *,Instance *);
   unsigned long                  GetGlobalNumberOfInstances(Environment *);
   Instance                      *EnvGetNextInstance(Environment *,Instance *);
   Instance                      *GetNextInstanceInScope(Environment *,Instance *);
   Instance                      *EnvGetNextInstanceInClass(Environment *,Defclass *,Instance *);
   Instance                      *EnvGetNextInstanceInClassAndSubclasses(Environment *,Defclass **,Instance *,DATA_OBJECT *);
   void                           EnvGetInstancePPForm(Environment *,char *,size_t,Instance *);
   void                           ClassCommand(Environment *,DATA_OBJECT *);
   bool                           DeleteInstanceCommand(Environment *);
   bool                           UnmakeInstanceCommand(Environment *);
   void                           SymbolToInstanceNameFunction(Environment *,DATA_OBJECT *);
   void                          *InstanceNameToSymbolFunction(Environment *);
   void                           InstanceAddressCommand(Environment *,DATA_OBJECT *);
   void                           InstanceNameCommand(Environment *,DATA_OBJECT *);
   bool                           InstanceAddressPCommand(Environment *);
   bool                           InstanceNamePCommand(Environment *);
   bool                           InstancePCommand(Environment *);
   bool                           InstanceExistPCommand(Environment *);
   bool                           CreateInstanceHandler(Environment *);

#endif /* _H_inscom */





